#! /usr/bin/python3

# for dev / debug
DEBUG_LOG = False

import time
import board
import busio

import simplejson as json
import requests

import RPi.GPIO as GPIO

#ADS library
import adafruit_ads1x15.ads1015 as ADS
from adafruit_ads1x15.analog_in import AnalogIn

import sys
from st7735_ijl20.st7735 import ST7735

from PIL  import Image
from PIL import ImageDraw
from PIL import ImageFont
from PIL import ImageColor


# info sent in json packet to feed handler
SENSOR_ID = 'footstep_detector'
SENSOR_TYPE = 'geophone'
ACP_TOKEN = 'testtoken'

# LCD panel size in pixels (0,0) is top left
DISPLAY_WIDTH = 160                # LCD panel width in pixels
DISPLAY_HEIGHT = 128               # LCD panel height

COLOR_FG = "WHITE"
COLOR_BG = "BLACK"

FONT_BIG = ImageFont.truetype('fonts/truetype/freefont/FreeMonoBold.ttf', 20)
FONT_SMALL = ImageFont.truetype('fonts/truetype/freefont/FreeMonoBold.ttf', 10)


# Declare globals
LCD=None
chan=None

runMain=None
runInterrupt=None
allowInterrupt=None

class Sensor(object):
	def __init__(self):
		global LCD
		global chan
		
		global runMain
		global runInterrupt
		global allowInterrupt
		
		self.SAMPLE_HISTORY_SIZE = 100
		self.sample_history_index = 0
		self.sample_history = [None]*self.SAMPLE_HISTORY_SIZE

        #DON'T FORGET TO ADD SETTIGNS
        self.sample_buffer = TimeBuffer(size=SAMPLE_HISTORY_SIZE, settings=None)
        self.event_buffer = TimeBuffer(size=EVENT_HISTORY_SIZE, settings=None)

		#load config here if have it
        LCD=self.init_lcd()
		chan=self.init_geophone()
		PIN=26
		
		GPIO.setup(PIN,GPIO.IN)
		
		def mic_callback(PIN):
		    if GPIO.input(PIN):
		    	self.sendEventMic()
		       # print(str(time.time())+" 1")
		
		GPIO.add_event_detect(PIN, GPIO.RISING, bouncetime=300)#detects if PIN high or low
		
		GPIO.add_event_callback(PIN, callback=mic_callback)

	def init_lcd(self):
		LCD=ST7735()
		LCD.begin()
		print("starting LCD")

		image=Image.new("RGB", (DISPLAY_WIDTH, DISPLAY_HEIGHT), "WHITE")
		draw = ImageDraw.Draw(image)

		draw.text((32,22), "Geophone", fill="BLUE", font=FONT_BIG)
		draw.text((45,40), "Sensor", fill="BLUE", font=FONT_BIG)
		draw.text((10,60), "for footstep detection", fill="BLUE", font=FONT_SMALL)

		LCD.display(image)

		time.sleep(1)

		image=Image.new("RGB", (DISPLAY_WIDTH, DISPLAY_HEIGHT), COLOR_FG)
		draw = ImageDraw.Draw(image)

		LCD.display(image)

		return LCD
		
	def init_geophone(self):
		global chan
				   
		# Create the I2C bus
		i2c = busio.I2C(board.SCL, board.SDA)
			
		# Create the ADC object using the I2C bus
		ads = ADS.ADS1015(i2c)
			
		# Create differential input between channel 0 and 1
		chan = AnalogIn(ads, ADS.P0, ADS.P1)

		return chan

		
		
	def send_data(self,post_data, token):
		response = requests.post('http://128.232.65.223:80/test/feedmaker/test.feed/general',
					  headers={'X-Auth-Token': token },
					  json=post_data
					  )
		
		print("status code",response.status_code)
	
	def updateScreenNumeric(self,value):
		value= "Geophone value: "+str(value)
		
		image = Image.new("RGB", (160,20), COLOR_BG)
		draw = ImageDraw.Draw(image)
	
		draw.text((0, 0), value, fill = "WHITE", font = FONT_SMALL)
	
		#LCD.LCD_ShowImage(image,0,120,w=160,h=20)
		LCD.display_window(image,
						  0,
						  110,
						  160,
						  18)
	
		#LCD_Config.Driver_Delay_ms(250)

	def scrollingBar(self):
	    BAR_CONFIG={"x":0,"y":0,"w":161,"h":60,"step":1}
	    lcdBar= LCD.add_bar(BAR_CONFIG)
	    return lcdBar
		
	def intensityBar(self, level):
		lineThick=10
			#setup for background
		image = Image.new("RGB", (DISPLAY_WIDTH, 50), COLOR_BG)
		draw = ImageDraw.Draw(image)
		colors=[(0,0,0),(0,200,0),(250,250,0),(255,100,0),(255,0,0),(100,0,0)]

		initY=-lineThick/2
		for i in range(level):
			draw.line([(0,initY),(160,initY)], fill =colors[i] ,width = lineThick)
			initY+=lineThick

		LCD.display_window(image,
								  0,
								  60,
								  160,
								  100)
	
		
	def updateIntensityBar(self,value):
		
		if(value<=16):
				self.intensityBar(1)
				
		if(value>16 and value<=48):
			self.intensityBar(2)

		#draw dark green, light green, yellow
		if(value>48 and value<=128):
			self.intensityBar(3)

		#draw dark green, light green, yellow, orange
		if(value>128 and value<=512):
			self.intensityBar(4)
		
		#draw dark green, light green, yellow, orange, red
		if(value>512 and value<=1024):
			self.intensityBar(5)		
			#draw dark green, light green, yellow, orange, red, dark red
		if(value>1024):
			self.intensityBar(6)
	
	def getValue(self):
		global chan
		#time.sleep(0.1)
		return abs(chan.value)

	
	def loop(self):
		now = time.time()
		prevEventSent = now
		prevLcdUpdate= now
		lcdBar=self.scrollingBar()
		global runInterrupt
		global runMain
		global allowInterrupt

		runMain=True
		runInterrupt=False
		allowInterrupt=True
		

		while True:
			try:
				now = time.time() # floating point time in seconds since epoch
				#try:
				if(runInterrupt==False):

					allowInterrupt=False

					if DEBUG_LOG:
						print("Main Reading Started (Interrupts not allowed)")

					intensity=self.getValue()
					allowInterrupt=True

					if DEBUG_LOG:
						print("Main Reading Finished (Interrupts allowed)")
				#except:
				else:
					intensity=0
					
				if (now-prevLcdUpdate >0.15):
					self.updateScreenNumeric(intensity)
					self.updateIntensityBar(intensity)
					lcdBar.next(intensity/5)
					prevLcdUpdate=time.time()
				
				if (now - prevEventSent > 5) or (intensity>32):
					self.sendEvent(intensity)
					prevEventSent = time.time()
	
			  #  time.sleep(1.0)
				#print("{:5} now {}, prev {} ".format(intensity, time.ctime(now)[10:20],time.ctime(prevEventSent)[10:20]))
			#	print("loop finished at {:.3f} secs.".format(time.process_time() - t_start))
			except (KeyboardInterrupt, SystemExit):
				self.goodbye_screen()
				self.finish()
	
	def sendEvent(self,sensor_reading):
		ts=time.time()
		print ("SENDING DATA {}, {}".format(sensor_reading, time.ctime(ts)))
		post_data = { 'request_data': [ { 'acp_id': SENSOR_ID,
										  'acp_type': SENSOR_TYPE,
										  'acp_ts': ts,
										  'intensity': sensor_reading,
										  'acp_units': 'vibration_level',
										  'mic_reading':0
														 }
													  ]
									}
		self.send_data(post_data, ACP_TOKEN)
		time.sleep(0.1)
		
		if DEBUG_LOG:
			 print("loop send data at {:.3f} secs.".format(time.process_time() - t_start))
			 
	def sendEventMic(self):

		if DEBUG_LOG:
			print("Attempting Interrupt Start ")

		global runMain
		global runInterrupt
		global allowInterrupt 

		if(allowInterrupt):

			runMain=False
			runInterrupt=True

			if DEBUG_LOG:
				print("Interrupt allowed, Main stopped ")
				print("Interrupt Reading Start")

			intensity=self.getValue()

			if DEBUG_LOG:
				print("Interrupt Reading Finished") #sampling getValue() too often can cause an IO error
			
			ts=time.time()				

			print ("SENDING DATA {}, {}, {}".format(intensity, 1, time.ctime(ts)))
			post_data = { 'request_data': [ { 'acp_id': SENSOR_ID,
											  'acp_type': SENSOR_TYPE,
											  'acp_ts': ts,
											  'intensity': intensity,
											  'acp_units': 'vibration_level',
											  'mic_reading':1
															 }
														  ]
										}
			self.send_data(post_data, ACP_TOKEN)

			time.sleep(0.1)

			if DEBUG_LOG:
				print("Back to Main, Interrupt finished ")

			runInterrupt=False
			runMain=True
			
			if DEBUG_LOG:
				 print("loop send data at {:.3f} secs.".format(time.process_time() - t_start))
		else:
			if DEBUG_LOG:
				print("Interrupt not allowed")
	

	def goodbye_screen(self):
		image=Image.new("RGB", (DISPLAY_WIDTH, DISPLAY_HEIGHT), "BLACK")
		draw = ImageDraw.Draw(image)
		draw.text((32,22), "Bye bye", fill="WHITE", font=FONT_BIG)
		LCD.display(image)
		time.sleep(1)
		
	def finish(self):

	    self.goodbye_screen()
	    
	    print("\n"+"SPI cleanup()...")
	    LCD.cleanup()
	    print("\n"+"GPIO cleanup()...")
	    GPIO.cleanup()
	    print("Bye bye")
	    sys.exit()
	   			
##main code

if __name__ =="__main__":
	g=Sensor()
   # try:
    #    while True:

        #get Reading
        #value=s.get_reading()
        #s.process_sample(time.time(), value)
        #time.sleep(0.1)
    g.loop()
	#except (KeyboardInterrupt, SystemExit):
	 #   pass
	
	g.finish()

